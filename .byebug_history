c
 user = User.find_by(id: user_data)
 user_data = decode_data[0]["user_data"] unless !decode_data
 decode_data = decode_user_data(request.headers["token"])
 user = User.find_by(id: user_data)
  user_data = decode_data[0]["user_data"] unless !decode_data
 decode_data[0]["user_data"] unless !decode_data
decode_user_data(request.headers["token"])
request.headers["token"]
c
  User.find(user_data)
 user_data = decode_data[0]["user_data"] unless !decode_data
decode_data = decode_user_data(request.headers["token"])
request.headers["token"].blank?
c
 return request.headers["token"].blank?
 return if request.headers["token"].blank?
current_user
user.present?
user = User.find_by(id: user_data)
user_data = decode_data[0]["user_data"] unless !decode_data
  decode_data = decode_user_data(request.headers["token"])
request.headers["token"]
c
current_user.friendships.new(friend_id: params[:user_id],requester_id: current_user.id)
user_id: params[:friend_id]
params[:friend_id]
params
current_user.friendships.new(friend_id: params[:user_id],requester_id: current_user.id)
requester_id: current_user.id
current_user.id
requester_id: current_user.id
 @user
c
@friendship = Friendship.new(user_id: params[:friend_id], friend_id: params[:friend_id], requester_id: current_user.id )
Friendship.find_by(id: params[:id])
params[:id]
 @friendship= Friendship.find_by(id: params[:id])
  render json: @friendship
   @friendship.update(status: true)
 @friendship= Friendship.find_by(id: params[:id])
params[:id]
c
 user = User.find_by(id: user_data)
 user_data = decode_data[0]["user_data"] unless !decode_data
  decode_data = decode_user_data(request.headers["token"])
decode_user_data(request.headers["token"])
request.headers["token"]
token
c
  @friendship= Friendship.find_by(id: params[:id])
Friendship.find_by(id: params[:id])
 params
c
 @friendship= Friendship.find_by(id: params[:id])
@friendship
params
c
 decode_data = decode_user_data(request.headers["token"])
decode_data
c
decode_user_data(eyJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2RhdGEiOjF9.wATB1jNqZ0dvJBekmoL8mh29MysD9RxOtmu9sr66vV4)
decode_user_data (eyJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2RhdGEiOjF9.wATB1jNqZ0dvJBekmoL8mh29MysD9RxOtmu9sr66vV4)
token = eyJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2RhdGEiOjF9.wATB1jNqZ0dvJBekmoL8mh29MysD9RxOtmu9sr66vV4
decode_user_data(token)
encode_user_data
current_user
params [:token]
params [token]
params 
token
'
token
c
current_user.id
sender_id == current_user.id
sender.id == current_user.id
render json: {message: 'message delete succes'},status: :ok
message.present?
 message.sender.id == current_user.id
message = Message.find_by(id: params[:id])
c
message = Message.find_by(id: params[:id])
 params[:id]
c
 message = Message.find_by(id: params[2])
 message = Message.find_by(2)
 message = Message.find_by(id: params[:id])
c
  render json: {message: 'message delete succes'},status: :ok
 message.destroy
 message.present?
message.sender.id == current_user.id
message = Message.find_by(id: params[:id])
c
message.sender.id == current_user.id
user.id 
user.id == current_user.id
message.user.id == current_user.id
 message = Message.find_by(id: params[:id])
params[:id]
params
c
message.user.id == current_user.id
message = Message.find_by(id: params[:id])
params
 params[:id]
c
 @friendship.update(status: true)
@friendship.status
@friendship
@friendship.first
@friendship
 @friendship.update(status =  true)
 @friendship= Friendship.find_by(id: params[:id])
c
 Friendship.find_by(id: 1)
 params
@friendship= Friendship.find_by(id: params[:id])
c
 @friendship = Friendship.update(status = true)
 @friendship = Friendship.update(status = true
 @friendship = Friendship.update
 @friendship.update
 @friendship
 Friendship.update
 @friendship = Friendship.update(status = true)
 @friendship
 @friendship = Friendship.update.(status = true)
status: true
Friendship.last
Friendship.all
@friendship = Friendship.update.(status: true)
render json: @friendship
Friendship.update
@friendship 
 @friendship = Friendship.update.(status = true)
status = true
Friendship.update
 @friendship= Friendship.find_by(id: params[:id])
c
 message = Message.create(sender_id: current_user.id, receiver_id: params[:receiver_id],user_id: params[:user_id])
c
permit(:text)
params.require.(:message).permit(:text)
c
message = Message.create(sender_id: current_user.id, receiver_id: params[:receiver_id], text: params[:message],user_id: params[:user_id])
params[:receiver_id]
params
c
params[:receiver_id ]
params
params[:user_id]
user_id: params[:user_id]
current_user
receiver_id
params[:receiver_id]
params
 message = Message.create(sender_id: current_user.id, receiver_id: params[:receiver_id], text: params[:message])
c
user_id: params[:user_id]
user_id:  params[:user_id]
user_id:  params[:user.id]
user_id:  params[user.id]
user_id: [user.id]
user_id: user.id
params[:user_id]
message = Message.new(sender_id: current_user.id, receiver_id: params[:receiver_id], text: params[:message])params[:user_id]
message = Message.new(user_id: params[:user_id],separams[:user_idnder_id: current_user.id, receiver_id: params[:receiver_id], text: params[:message])
message = Message.new(user_id: params[:user_id],sender_id: current_user.id, receiver_id: params[:receiver_id], text: params[:message])
c
message = Message.new(sender_id: current_user.id, receiver_id: params[:receiver_id], text: params[:message])
sender_id: current_user.id
current_user.id
c
 message = Message.new(senderc_id: params[:sender_id], receiver_id: params[:receiver_id], text: params[:message])
message = Message.new(sender message = Message.new(sender_id: params[:current_user_id], receiver_id: params[:receiver_id], text: params[:message])_id: params[:current_user.id], receiver_id: params[:receiver_id], text: params[:message])
 params[:current_user.id]
message = Message.new(sender_id: params[:current_user.id], receiver_id: params[:receiver_id], text: params[:message])
current_user.id
current_userid
current_user
current_user_id
params[:current_user_id]
c
params[:sender_id]
params[:message]
 params[:receiver_id]
arams[:receiver_id]
 message = Message.new(sender_id: params[:sender_id], receiver_id: params[:receiver_id], text: params[:message])
c
params
params[:message]
params[:receiver_id]
 params[:sender_id]
sender_id: params[:sender_id]
c
 Rails.application.routes.url_helpers.url_for(object.object.image)
object.object.image.attached?
c
   Rails.application.routes.url_helpers.url_for(object.object.image)
 attribute :image do |object, params|
Rails.application.routes.url_helpers.url_for(object.object.image)
 Rails.env == 'development' || Rails.env == 'test'
object.object.image.attached?
 attribute :image do |object, params|
c
post = Post.find_by(id: params[:id])
params[:id]
c
 post.update(post_params)
 post.update(post_params) post.user.id == current_user.idpost.update(post_params)
post.user.id == current_user.id
 post.update(post_params) post.user.id == current_user.id
 post.present?
 post.update(post_params)
post = Post.find(14)
 render json: {message: 'post update succes'}, status: :ok
render json: post, status: :ok
 post.update(post_params)
 post.present?
post.user.id == current_user.id
post = Post.find_by(id: params[:id])
c
 post.update(post_params)
post.present?
 post.user.id == current_user.id
post = Post.find_by(id: params[:id])
c
post.update(post_params)
 post.update(post_params)
post.present?
 post.user.id == current_user.id
post = Post.find_by(id: params[:id])
c
post = Post.find_by(id: params[:id])
post.present?
current_user.id
 params[:id]
c
post.user.id
 params[:id]
current_user.posts
current_user.post
current_user
 post.current_user
 post.current_user_id
 post.current_user
 post.current_user.id
 post.current_user
 post = Post.find_by(id: params[:id])
current_user
post.user.id
 post = Post.find(14)
 post = Post.find_by(14)
post.user.id
